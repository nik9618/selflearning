//============================================================================
// Name        : AMHProject.cpp
// Author      : Nik
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <random>
#include <string>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define margin 100 // becareful margin must me at least 3*dsize
#define s(i) 		S[i+margin]
#define d(k,i) 		D[k][i+dsize]
#define nd(k,i) 	ND[k][i+dsize]
#define z(k,i) 		Z[k][i+margin]
#define zn(k,i) 	Zn[k][i+margin]
#define b(k,i) 		B[k][i+margin]
#define LAMBDA		0.001
//#define eta			0.5
#define MAXDICITER 	1000

#define DEBUG true

using namespace std;
double shrink(double beta, double lamb)
{
	if(beta>lamb) return beta - lamb;
	if(beta<-lamb) return beta + lamb;
	return 0;
}

int dsize = 10;
int K = 4;
int ssize = 100;

vector<double> S(ssize+margin,0);
vector< vector<double> > D(K,vector<double>(dsize*2+1,0));
vector< vector<double> > ND(K,vector<double>(dsize*2+1,0));
vector< vector<double> > Z(K,vector<double>(ssize+3*margin,0));
vector< vector<double> > Zn(K,vector<double>(ssize+3*margin,0));
vector< vector<double> > B(K,vector<double>(ssize+3*margin,0));

double calcLoss()
{
	double loss=0;
	for(int i =0 ; i < ssize ;i++)
	{
		double x = s(i);
		for(int k = 0 ; k <  K ; k++)
		{
			for(int j =-dsize; j<= dsize ;j++)
			{
				x-= d(k,j) * z(k,i+j);
			}
		}
		loss+= x*x;
	}
	if(LAMBDA!=0)
	{
		for(int k = 0 ; k <  K ; k++)
		{
			for(int i =-dsize ; i < ssize+dsize ;i++)
			{
				loss+= fabs(z(k,i));
			}
		}
	}
	return loss;
}

void reportZ()
{
	for(int k = 0 ; k < K ; k++)
	{
		cout << "Z"<<k<<":\t";
		for(int i = - dsize; i<= ssize + dsize ;i++)
		{
			cout << z(k,i) <<"\t";
		}
		cout<<endl;
	}
}
void reportD()
{
	for(int k = 0 ; k < K ; k++)
	{
		for(int i = - dsize; i<= dsize ;i++)
		{
			cout << d(k,i) <<"\t";
		}
		cout<<endl;
	}
}

void reportB()
{
	for(int k=0;k<K;k++)
	{
		for(int i = - dsize; i< ssize + dsize; i++)
		{
			cout << b(k,i)<<"\t";
		}
		cout<<endl;
	}
}


void initS(vector<double> in) {
	//init signal
//	cout << "Signal("<< ssize <<") : ";
	for(int i = 0 ; i < ssize;i++)s(i) = in[i];
//	for(int i = -5 ; i < ssize+5 ;i++) cout << s(i) <<" ";
//	cout<<endl<<endl;
}

void initZ() {
	//init Z
	for(int k=0;k<K;k++)
	{
		for(int i = -dsize;i<ssize+dsize;i++)
		{
			z(k,i) = 0;
		}
	}
	cout<<endl<<endl;
}

void normalizeDictionary()
{
	for(int k = 0 ; k < K ; k++)
	{
		double total = 0.f;
		for(int i = -dsize; i <=dsize ; i++ )
		{
			total += d(k,i);
		}
		for(int i = -dsize; i <=dsize ; i++ )
		{
			d(k,i) /=total;
		}
	}
}

void initD()
{
	for(int k=0; k < K;k++)
	{
		for(int i=-dsize; i<=dsize; i++)
		{
			d(k,i) = 1./(1+2*dsize) + 1./(1+2*dsize)*(rand()%10000)/100000.0;
		}
	}
	cout << endl;
	normalizeDictionary();
	for(int k=0; k < K;k++)
	{
		cout << "D"<<k<<":\t";
		for(int i=-dsize; i<=dsize; i++)
		{
			cout << d(k,i)<<"\t";
		}
		cout << endl;
	}
	cout << endl;
}

void initBeta()
{
	// init Beta = D*z
	for(int k=0;k<K;k++)
	{
		for(int i = - dsize; i< ssize + dsize; i++)
		{
			b(k,i) = 0;
//			cout << "At : "<< i << " \n ";
			for(int j =-dsize ; j <= dsize ;j++)
			{
				if(i+j <0 || i+j >=ssize) continue;
//				cout << "s "<<i+j<<"\t d "<<-j <<endl;
				b(k,i) -= s(i+j) * d(k,-j);
			}
//			cout << b(k,i)<<endl;
		}
	}
}

void inference()
{
	// Coordinate Descent
	int round = 0;
	char x;
	double lastLoss = 0;
	while(true)
	{
		round++;

		//calculate loss
		double loss =0 ;
		loss = calcLoss();
//		if(round%50==0)
		{
			cout<<"InferZ Loss("<<round<<"):\t";
			printf("%.5f\n",loss);
		}

		if(fabs(lastLoss-loss) < 0.1) return;

//		reportZ();
//		reportD();
		lastLoss = loss;

		// calculate new Z
		for(int k=0;k<K;k++)
		{
			for(int i= -dsize ; i< ssize + dsize; i++)
			{
				double sqdivider = 0;
				for(int j = -dsize; j<=dsize; j++)
				{
					if(i+j < 0 || i+j >= ssize) continue;
					sqdivider += (d(k,-j) * d(k,-j));
				}
				zn(k,i) = shrink(-b(k,i),LAMBDA) / sqdivider;
			}
		}

		//maximum diff Z
		double maxV=-1;
		int maxK;
		int maxI;

		for(int k =0 ; k < K ; k++)
		{
			for(int i=-dsize ; i < ssize + dsize; i++)
			{
				double fs = fabs(zn(k,i) - z(k,i) );
				if(fs > maxV )
				{
					maxV=fs;
					maxK=k;
					maxI=i;
				}
			}
		}
//		cout << "maxV : " <<maxV ;
//		cout << "\tmaxK : " <<maxK ;
//		cout << "\tmaxI : " <<maxI ;
//		cout << "\tsig : " <<s(maxI) ;
//		cout << "\tnewZ : " << zn(maxK,maxI)<<endl;
//		reportB();
		// save old beta
		double savedBeta = b(maxK,maxI);

		// update beta
		for(int i=-2*dsize; i<= 2*dsize; i++)
		{
			int editing = i+maxI;
			if(editing < -dsize || editing >= ssize + dsize) continue;
			for(int k=0; k<K ;k++)
			{
				double total = 0;
				for(int r = -dsize + editing; r<=dsize + editing; r++)
				{
					if(r < 0 || r >= ssize) continue;
					for(int c = -dsize ; c<= dsize ;c++)
					{
						int zind = r+c;
						if( zind == maxI )
						{
							total += d(maxK,c) * d(k,-(r-editing));
//							cout << "sum : d("<<maxK<<","<<c<<")="<< d(maxK,c) <<" * d("<<k<<","<<-(r-editing)<<")"<<d(k,-(r-editing))<<"\n";
						}
					}
				}
				b(k,editing) += (zn(maxK,maxI)-z(maxK,maxI)) * total;
//				cout << "up : "<< k<<" "<<editing << " : " << b(k,editing) <<endl<<endl;
			}
		}

		// restore beta
//		if(round %10==0) cout << "change z : " << abs(z(maxK,maxI))<<endl;
		z(maxK,maxI) = zn(maxK,maxI);
		b(maxK,maxI) = savedBeta;
	}
	return;
}

void learnDictionary()
{
	double stepsize = 0.00001;
	double stepsizeInc = 0.00001;
	double lastLoss=99999999;
	int round = 0 ;
	while(round < MAXDICITER)
	{
		double loss = calcLoss();
		if(round%1==0)
		{
			cout << "Loss("<<round<<") :\t"<< loss << endl;
		}

		round++;

//		if(fabs(loss-lastLoss) < 0.01) return;
		if(loss>lastLoss)
		{
			stepsize/=2;
		}
		else
		{
			stepsize+=stepsizeInc;
		}
		lastLoss=loss;

		vector<double> precalc(ssize,0);
		for(int i = 0 ; i < ssize; i++)
		{
			precalc[i] = s(i);
			for(int k =0 ; k < K ;k++)
			{
				for(int j=-dsize;j<=dsize;j++)
				{
					precalc[i] -= d(k,j) * z(k,i+j);
				}
			}
		}
		for(int k=0;k<K;k++)
		{
			for(int d=-dsize;d<=dsize; d++)
			{
				nd(k,d) = 0;
				for(int i = 0 ; i < ssize;i++)
				{
					nd(k,d) += precalc[i] * -z(k,i+d);
				}
			}
		}
		for(int k=0;k<K;k++)
		{
			for(int ds=-dsize;ds<=dsize; ds++)
			{
				d(k,ds) -=  stepsize * nd(k,ds);
			}
		}
	}
}

// ^^^^^^^^^^^^^^^^^^^^^^ OPTIMIZATION PART
//-----------------------
// vvvvvvvvvvvvvvvvvvvvvv FILE INPUT PART


int main(void)
{
	char x ;
	int r = 1;
	initD();

	while(true)
	{
		r++;
		vector<double> ts(ssize,2);
		for(int i =0  ; i < 15; i++)
		{
			ts[30+i]=2+i;
		}
		for(int i = 15;i<30;i++)
		{
			ts[30+i]=2+30-i;
		}
//		for(int i = 0;i<ssize;i++)
//		{
//			ts[i]/=40.;
//		}
		initS(ts);
		initZ();
		cout << "Start Loss( "<<r <<" ): " << calcLoss()<<endl;

		initBeta();
		inference();
//		reportZ();
		learnDictionary();
		normalizeDictionary();
		reportD();
		cout << "End Loss( "<<r <<" ): " << calcLoss()<<endl;
//		cout <<"Sig: "<< endl<<"[";
//		for(int j= 0 ;j<ssize; j++) cout << s(j)<<",";
//		cout << "]"<<endl;
		if(r%100==0)scanf("%c",&x);
	}
}

//	for(int i =0 ; i < ts.size() ; i++)
//	{
//		for(int j = 0 ;j < SAMPLESIZE ;j++)
//		{
//			cout << ts[i][j]<<"," ;
//		}
//		cout << endl;
//	}
//	cout << "loading data "<< endl;
////	vector< vector<double> > ts = timeSeries("/Users/nik9618/Desktop/ubt/a40024.txt","II");
//	cout << "done loading data "<< endl;


//	int i=0;
//	vector< vector<double> > ts(1,vector<double>(1250,0));
//	double tss[]= {0,0.0399893341866342,0.0799146939691727,0.119712207288919,0.159318206614246,0.198669330795061,0.237702626427135,0.276355648564114,0.314566560616118,0.352274233275090,0.389418342308651,0.425939465066000,0.461779175541483,0.496880137843737,0.531186197920883,0.564642473395035,0.597195441362392,0.628793024018469,0.659384671971473,0.688921445110551,0.717356090899523,0.744643119970859,0.770738878898969,0.795601620036366,0.819191568300998,0.841470984807897,0.862404227243338,0.881957806884948,0.900100442176505,0.916803108771767,0.932039085967226,0.945783999449539,0.958015860289225,0.968715100118265,0.977864602435316,0.985449729988460,0.991458348191686,0.995880844537640,0.998710143975583,0.999941720229966,0.999573603041505,0.997606381319174,0.994043202198076,0.988889766004702,0.982154317137619,0.973847630878195,0.963982996152448,0.952576194271595,0.939645473685325,0.925211520788168,0.909297426825682,0.891928650953380,0.873132979507516,0.852940481552876,0.831383460778683,0.808496403819590,0.784315925084420,0.758880708180922,0.732231444030251,0.704410765770176,0.675463180551151,0.645434998334371,0.614374257805712,0.582330649524082,0.549355436427127,0.515501371821464,0.480822614988648,0.445374644541871,0.409214169672017,0.372399039425055,0.334988150155905,0.297041351306832,0.258619349661111,0.219783612225117,0.180596267894233,0.141120008059867,0.101417986316602,0.0615537174299132,0.0215909757260960,-0.0184063069330538,-0.0583741434275801,-0.0982485937451087,-0.137965867271227,-0.177462424840861,-0.216675080387380,-0.255541102026831,-0.293998312415568,-0.331985188220734,-0.369440958544477,-0.406305702144417,-0.442520443294852,-0.478027246135343,-0.512769307355724,-0.546691047069287,-0.579738197728743,-0.611857890942719,-0.642998742053909,-0.673110932343562,-0.702146288730805,-0.730058360839300,-0.756802495307928,-0.782335907226653,-0.806617748583241,-0.829609173611371,-0.851273400935575,-0.871575772413588,-0.890483808581989,-0.907967260616405,-0.923998158723188,-0.938550856885108,-0.951602073889516,-0.963130930573317,-0.973118983225174,-0.981550253091516,-0.988411251939131,-0.993691003633465,-0.997381061698093,-0.999475522827284,-0.999971036330025,-0.998866809490414,-0.996164608835841,-0.991868757310913,-0.985986127361670,-0.978526129941139,-0.969500699453809,-0.958924274663139,-0.946813775592609,-0.933188576457298,-0.918070474669267,-0.901483655966355,-0.883454655720153,-0.864012316485074,-0.843187741856417,-0.821014246711247,-0.797527303911704,-0.772764487555987,-0.746765412867812,-0.719571672820508,-0.691226771597126,-0.661776054993037,-0.631266637872321,-0.599747328794044,-0.567268551928969,-0.533882266391644,-0.499641883116902,-0.464602179413757,-0.428819211333396,-0.392350223991454,-0.355253559988043,-0.317588566072035,-0.279415498198926,-0.240795425134159,-0.201790130756129,-0.162462015215154,-0.122873995106550,-0.0830894028174964,-0.0431718852087287,-0.00318530179313799,0.0368063774258269,0.0767391742925189,0.116549204850494,0.156172781543212,0.195546515100544,0.234607415948081,0.273292994977013,0.311541363513379,0.349291332326736,0.386482509519879,0.423055397142997,0.458951486377690,0.494113351138608,0.528484739942931,0.562010665900743,0.594637494682329,0.626313030321656,0.656986598718789,0.686609128707639,0.715133230559358,0.742513271795802,0.768705450191756,0.793667863849153,0.817360578231173,0.839745690048980,0.860787387898902,0.880452009553034,0.898708095811627,0.915526440831090,0.930880138847114,0.944744627218154,0.957097725720417,0.967919672031487,0.977193153345823,0.984903334071561,0.991037879564290,0.995586975859855,0.998543345374605,0.999902258547975,0.999661541408774,0.997821579053074,0.994385315028140,0.989358246623382,0.982748416075862,0.974566397704435,0.964825280993091,0.953540649650574,0.940730556679773,0.926415495496766,0.910618367145730,0.893364443662152,0.874681327642965,0.854598908088281,0.833149312585366,0.810366855911355,0.786287985136929,0.760951221318774,0.734397097874113,0.706668095735878,0.677808575392287,0.647864705919518,0.616884391121045,0.584917192891762,0.552014251929533,0.518228205920975,0.483613105332400,0.448224326940585,0.412118485241757,0.375353341880461,0.337987713243268,0.300081376365083,0.261694973298663,0.222889914100246,0.183728278586583,0.144272717020457,0.104586349883635,0.0647326668975659,0.0247754254533578,-0.0152214513864317,-0.0551939771510745,-0.0950782043263610,-0.134810326656996,-0.174326781222980,-0.213564350126739,-0.252460261628258,-0.290952290566491,-0.328978857906327,-0.366479129251928,-0.403393112168770,-0.439661752158750,-0.475227027134780,-0.510032040243754,-0.544021110889370,-0.577139863809211,-0.609335316063561,-0.640555961796812,-0.670751854635837,-0.699874687593544,-0.727877870349737,-0.754716603785701,-0.780347951653232,-0.804730909263467,-0.827826469085654,-0.849597683150864,-0.870009722160873,-0.889029931207599,-0.906627882013998,-0.922775421612807,-0.937446717385293,-0.950618298387930,-0.962269092900902,-0.972380462138356,-0.980936230066492,-0.987922709281756,-0.993328722907774,-0.997145622475965,-0.999367301761250,-0.999990206550704,-0.999013340329543,-0.996438265875335,-0.992269102757886,-0.986512520748811,-0.979177729151317,-0.970276462067290,-0.959822959625228,-0.947833945199077,-0.934328598654398,-0.919328525664676,-0.902857723146850,-0.884942540871364,-0.865611639308158,-0.844895943776026,-0.822828594968709,-0.799444895936846,-0.774782255610634,-0.748880128953510,-0.721779953842635,-0.693525084777122,-0.664160723520095,-0.633733846785499,-0.602293131085391,-0.569888874857894,-0.536572918000435,-0.502398558936958,-0.467420469351827,-0.431694606726780,-0.395278124820910,-0.358229282236827,-0.320607349219338,-0.282472512835684,-0.243885780689082,-0.204908883319571,-0.165604175448309,-0.126034536223339,-0.0862632686263439,-0.0463539982013972,-0.00637057126765214,0.0336230472211367,0.0735628760069077,0.113385019883642,0.153025771916079,0.192421715357206,0.231509825101539,0.270227568511837,0.308513005457991,0.346304887408008,0.383542755412610,0.420167036826641,0.456119140612605,0.491341551073814,0.525777919867248,0.559373156148867,0.592073514707225,0.623826681944329,0.654581859566253,0.684289845849551,0.712903114353539,0.740375889952449,0.766664222065866,0.791726054970291,0.815521295079313,0.838011875084807,0.859161814856496,0.878937279002494,0.897306630998707,0.914240483800529,0.929711746855837,0.943695669444105,0.956169880272267,0.967114423264024,0.976511789485298,0.984346945154800,0.990607355694870,0.995283005784128,0.998366415379848,0.999852651684436,0.999739337036853,0.998026652716362,0.994717338652522,0.989816689041886,0.983332543878415,0.975275276411161,0.965657776549277,0.954495430240921,0.941806094859012,0.927610070633246,0.911930068174061,0.894791172140504,0.876220801110125,0.856248663715105,0.834906711114780,0.812229085880604,0.788252067375316,0.763014013713702,0.736555300397785,0.708918255724651,0.680147093070186,0.650287840157117,0.619388265420469,0.587497801588267,0.554667466599702,0.520949781987327,0.486398688853798,0.451069461577624,0.415018619385944,0.378303835935832,0.340983847048736,0.303118356745702,0.264767941733678,0.225993954495693,0.186858425139989,0.147423962165064,0.107753652299444,0.0679109595763636,0.0279596238048615,-0.0120364414003286,-0.0520132508669136,-0.0919068502276816,-0.131653418233833,-0.171189368855376,-0.210451453005200,-0.249376859724133,-0.287903316665065,-0.325969189715432,-0.363513581598642,-0.400476429296720,-0.436798600138338,-0.472421986398466,-0.507289598258342,-0.541345654977011,-0.574535674128631,-0.606806558762718,-0.638106682347947,-0.668385971363588,-0.697595985406447,-0.725689994685196,-0.752623054778058,-0.778352078534298,-0.802835905004470,-0.826035365289160,-0.847913345200867,-0.868434844638788,-0.887567033581505,-0.905279304608026,-0.921543321863127,-0.936333066388672,-0.949624877748395,-0.961397491879557,-0.971632075110905,-0.980312254292531,-0.987424142989415,-0.992956363696766,-0.996900066041596,-0.999248940941432,-0.999999230697499,-0.999149735006242,-0.996701812879551,-0.992659380470633,-0.987028904809002,-0.979819393454614,-0.971042380087687,-0.960711906057281,-0.948844497918124,-0.935459140991664,-0.920577248993590,-0.904222629776466,-0.886421447242238,-0.867202179485581,-0.846595573235013,-0.824634594664691,-0.801354376655569,-0.776792162590283,-0.750987246771676,-0.723980911560303,-0.695816361331455,-0.666538653357386,-0.636194625725274,-0.604832822406284,-0.572503415595562,-0.539258125447438,-0.505150137334196,-0.470234016760835,-0.434565622071894,-0.398202015090029,-0.361201369829252,-0.323622879428932,-0.285526661457391,-0.246973661736621,-0.208025556841980,-0.168744655432811,-0.129193798571889,-0.0894362591931219,-0.0495356408783674,-0.00955577610524739,0.0304393758711842,0.0703858313396126,0.110219684492737,0.149877209662952,0.189294963269806,0.228409885316204,0.267159400270935,0.305481517176199,0.343314928819895,0.380599109814096,0.417274413422736,0.453282166983695,0.488564765772518,0.523065765157699,0.556729970900038,0.589503527451662,0.621334004113409,0.652170478912760,0.681963620068136,0.710665764909212,0.738230996127046,0.764615215231955,0.789776213101710,0.813673737507105,0.836269557506963,0.857527524609467,0.877413630602047,0.895896061957253,0.912945250727628,0.928533921848105,0.942637136770299,0.955232333358857,0.966299361986070,0.975820517766976,0.983780568883396,0.990166780951598,0.994968937394591,0.998179355786473,0.999792900142669,0.999806989136414,0.998221600228323,0.995039269702451,0.990265088608778,0.983906694618616,0.975974259805966,0.966480474374364,0.955440526355268,0.942872077310444,0.928795234077240,0.913232516601929,0.896208821912602,0.877751384289231,0.857889731694642,0.836655638536056,0.814083074832830,0.790208151871663,0.765069064436253,0.738706029703773,0.711161222905983,0.682478709857843,0.652704376461627,0.621885855299246,0.590072449430293,0.557315053517658,0.523666072406936,0.489179337289832,0.453910019585759,0.417914542679321,0.381250491654940,0.343976521173016,0.306152261634959,0.267838223787285,0.229095701917322,0.189986675795438,0.150573711520610,0.110919861428028,0.0710885632187999,0.0311435384731763,-0.00885130929040388,-0.0488319968472980,-0.0887345636261771,-0.128495174032281,-0.168050219570776,-0.207336420606759,-0.246290927599185,-0.284851421646711,-0.322956214184666,-0.360544345673576,-0.397555683121436,-0.433931016283655,-0.469612152386833,-0.504542009224775,-0.538664706477846,-0.571925655109564,-0.604271644697403,-0.635650928558135,-0.666013306531474,-0.695310205289626,-0.723494756044245,-0.750521869526510,-0.776348308120325,-0.800932755033290,-0.824235880394741,-0.846220404175171,-0.866851155826312,-0.886095130546517,-0.903921542081392,-0.920301871975248,-0.935209915194539,-0.948621822050328,-0.960516136352698,-0.970873829736085,-0.979678332100598,-0.986915558120649,-0.992573929778464,-0.996644394886445,-0.999120441568739,-0.999998108678850,-0.999275992136628,-0.996955247174496,-0.993039586489328,-0.987535274302924,-0.980451116340591,-0.971798445743863,-0.961591104939891,-0.949845423496510,-0.936580191998417,-0.921816631986246,-0.905578362006624,-0.887891359827539,-0.868783920879449,-0.848286612988640,-0.826432227475208,-0.803255726693955,-0.778794188102072,-0.753086744943127,-0.726174523642211,-0.698100578012437,-0.668909820378022,-0.638648949724155,-0.607366376988573,-0.575112147614392,-0.541937861488074,-0.507896590390622,-0.473042793094040,-0.437432228238920,-0.401121865132517,-0.364169792610000,-0.326635126104722,-0.288577913076121,-0.250059036946603,-0.211140119701049,-0.171883423304801,-0.132351750097773,-0.0926083423241229,-0.0527167809581468,-0.0127408839882810,0.0272553956780523,0.0672080725254749,0.107053230793814,0.146727126729692,0.186166290562916,0.225307628044596,0.264088521384469,0.302446929426007,0.340321486899038,0.377651602591071,0.414377556280337,0.450440594275386,0.485783023408466,0.520348303332274,0.554081136972468,0.586927558991178,0.618835022120039,0.649752481224603,0.679630474965678,0.708421204926910,0.736078612082059,0.762558450479603,0.787818358026840,0.811817924260186,0.834518754993306,0.855884533739608,0.875881079810889,0.894476402999138,0.911640754754046,0.927346675774334,0.941569039936790,0.954285094492697,0.965474496467379,0.975119345204620,0.983204211003900,0.989716159804619,0.994644773877838,0.997982168492421,0.999723004528924,0.999864497021047,0.998406419610987,0.995351104911559,0.990703440774518,0.984470862471033,0.976663340796844,0.967293366121114,0.956375928404503,0.943928493218429,0.929970973803878,0.914525699214466,0.897617378594724,0.879273061650724,0.859522095376333,0.838396077104273,0.815928803957138,0.792156218779200,0.767116352635530,0.740849263970401,0.713396974522336,0.684803402098273,0.655114290314455,0.624377135416394,0.592641110295017,0.559956985820531,0.526377049619851,0.491955022427562,0.456745972144193,0.420806225739340,0.384193279140512,0.346965705251921,0.309183060250326,0.270905788307869,0.232195124894272,0.193112998813163,0.153721933129191,0.114084945144480,0.0742654455843613,0.0343271371537577,-0.00566608737356341,-0.0456502473697841,-0.0855613767084132,-0.125335626096429,-0.164909365219535,-0.204219284537075,-0.243202496563812,-0.281796636476480,-0.319939961884195,-0.357571451603117,-0.394630903277312,-0.431059029689699,-0.466797553608939,-0.501789301020574,-0.535978292593249,-0.569309833233712,-0.601730599587288,-0.633188725343876,-0.663633884212968,-0.693017370434997,-0.721292176700152,-0.748413069350046,-0.774336660741918,-0.799021478659614,-0.822428032660279,-0.844518877250646,-0.865258671791829,-0.884614237036817,-0.902554608210185,-0.919051084545133,-0.934077275198583,-0.947609141470906,-0.959625035262710,-0.970105733707185,-0.979034469922581,-0.986396959835648,-0.992181425033106,-0.996378611604594,-0.998981804946949,-0.999986840506142,-0.999392110439673,-0.997198566188780,-0.993409716956334,-0.988031624092862,-0.981072891399680,-0.972544651364646,-0.962460547352555,-0.950836711778668,-0.937691740300281,-0.923046662067651,-0.906924906081830,-0.889352263713274,-0.870356847441141,-0.849969045879328,-0.828221475161165,-0.805148926760572,-0.780788311833105,-0.755178602165995,-0.728360767831596,-0.700377711644007,-0.671274200523734,-0.641096793880149,-0.609893769126377,-0.577715044445732,-0.544612098933279,-0.510637890240252,-0.475846769853114,-0.440294396142771,-0.404037645323065,-0.367134520460943,-0.329644058683937,-0.291626236733349,-0.253141875014270,-0.214252540295888,-0.175020447217803,-0.135508358759871,-0.0957794858348347,-0.0558973861643298,-0.0159258626001018,0.0240711389469538,0.0640296318065932,0.103885690914268,0.143575555077579,0.183035728980585,0.222203084762764,0.261014963010116,0.299409272996875,0.337324592017410,0.374700263649462,0.411476494791465,0.447594451318772,0.482996352205694,0.517625561962815,0.551426681241691,0.584345635461997,0.616329761319319,0.647327891035205,0.677290434214676,0.706169457180334,0.733918759655944,0.760493948677099,0.785852509610422,0.809953874167963,0.832759485307780,0.854232858916986,0.874339642178554,0.893047668528471,0.910327009115425,0.926150020680526,0.940491389780678,0.953328173284640,0.964639835077178,0.974408278912449,0.982617877364140,0.989255496826016,0.994310518522887,0.997774855498387,0.999642965552373,0.999911860107267,0.998581108989144,0.995652841115913,0.991131741091508,0.985025041711519,0.977342512392259,0.968096443541790,0.957301626897877,0.944975331864385,0.931137277883897,0.915809602890819,0.899016827895412,0.880785817755397,0.861145738197933,0.840128009160639,0.817766254526442,0.794096248332499,0.769155857539389,0.742984981452048,0.715625487889393,0.687121146204744,0.657517557264189,0.626862080494954,0.595203758120360,0.562593236702809,0.529082686120024,0.494725716104400,0.459577290478866,0.423693639226493,0.387132168534513,0.349951368956662,0.312210721840798,0.273970604171391,0.235292191979254,0.196237362472941,0.156868595048410,0.117248871335317,0.0774415744398383,0.0375103875452584,-0.00248080796761880,-0.0424680347169515,-0.0823873216701014,-0.122174806483604,-0.161766837669301,-0.201100076423145,-0.240111597953774,-0.278738992148760,-0.316920463417441,-0.354594929550761,-0.391702119439677,-0.428182669496151,-0.463978218622196,-0.499031501575187,-0.533286440580034,-0.566688235041658,-0.599183449214265,-0.630720097687109,-0.661247728550098,-0.690717504106065,-0.719082279000672,-0.746296675644916,-0.772317156809595,-0.797102095275589,-0.820611840428512,-0.842808781691280,-0.863657408692956,-0.883124368077811,-0.901178516863559,-0.917790972263489,-0.932935157892762,-0.946586846284961,-0.958724197650862,-0.969327794817439,-0.978380674291213,-0.985868353396199,-0.991778853443116,-0.996102718892729,-0.998833032482693,-0.999965426293702,-0.999498088737222,-0.997431767453648,-0.993769768116245,-0.988517949142766,-0.981684712323241,-0.973280989378902,-0.963320224473761,-0.951818352706816,-0.938793774619291,-0.924267326757704,-0.908262248339814,-0.890804144076861,-0.871920943211469,-0.851642854836818,-0.830002319568549,-0.807033957646688,-0.782774513550654,-0.757262797215926,-0.730539621946442,-0.702647739121975,-0.673631769805108,-0.643538133357000,-0.612414973176333,-0.580312079680145,-0.547280810649776,-0.513374009069380,-0.478645918588415,-0.443152096743398,-0.406949326077664,-0.370095523301432,-0.332649646637418,-0.294671601500258,-0.256222144660619,-0.217362787047326,-0.178155695343026,-0.138663592530684,-0.0989496575502896,-0.0590774242259487,-0.0191106796253580,0.0208866379859057,0.0608505414319704,0.100717096992501,0.140422526683018,0.179903310286036,0.219096286969937,0.257938756332727,0.296368578709385,0.334324274582033,0.371745122934058,0.408571258390785,0.444743766991307,0.480204780438259,0.514897568674727,0.548766630640271,0.581757783060762,0.613818247130064,0.644896732944867,0.674943521557591,0.703910544516100,0.731751460762947,0.758421730771236,0.783878687798293,0.808081606143408,0.830991766300242,0.852572516899785,0.872789333344725,0.891609873041441,0.909004027141256,0.924943968708155,0.939404197235984,0.952361579443774,0.963795386284088,0.973687326105064,0.982021573913158,0.988784796689753,0.993966174721152,0.997557418907805,0.999552784025105,0.999949077914520,0.998745666590365,0.995944475254045,0.991549985214141,0.985569226717277,0.978011767701219,0.968889698488226,0.958217612443093,0.946012582626908,0.932294134483775,0.917084214604276,0.900407155615609,0.882289637254572,0.862760643685679,0.841851417132673,0.819595407897653,0.796028220847685,0.771187558454662,0.745113160479349,0.717846740396266,0.689431918661020,0.659914152926882,0.629340665322238,0.597760366905255,0.565223779416640,0.531782954455600,0.497491390208411,0.462403945862725,0.426576753844573,0.390067130018457,0.352933481994189,0.315235215687203,0.277032640281697,0.238386871748892,0.199359735074443,0.160013665351682,0.120411607898788,0.0806169175596948,0.0406932573498649,0.000704496609033249,-0.0392853911760740,-0.0792124307157502,-0.119012747264025,-0.158622668804709,-0.197978827913004,-0.237018263129868,-0.275678519686925,-0.313897749420763,-0.351614809716816,-0.388769361324475,-0.425301964887055,-0.461154176032063,-0.496268638869731,-0.530589177750204,-0.564060887132597,-0.596630219422156,-0.628245070634953,-0.658854863753213,-0.688410629637670,-0.716865085367810,-0.744172709884422,-0.770289816813598,-0.795174624355602,-0.818787322126844,-0.841090134847999,-0.862047382776383,-0.881625538785965,-0.899793282003571,-0.916521547915634,-0.931783574865201,-0.945554946864878,-0.957813632657203,-0.968540020959953,-0.977716951840021,-0.985329744165635,-0.991366219093053,-0.995816719550103,-0.998674125685443,-0.999933866258804,-0.999593925953999,-0.997654848602999,-0.994119736315918,-0.988994244518297,-0.982286572903635,-0.974007452315619,-0.964170127581073,-0.952790336321056,-0.939886283774022,-0.925478613671331,-0.909590375211670,-0.892246986187272,-0.873476192320846,-0.853308022878357,-0.831774742628598,-0.808910800226449,-0.784752773102372,-0.759339308946328,-0.732711063879715,-0.704910637414248,-0.675982504301839,-0.645972943384456,-0.614929963557871,-0.582903226967655,-0.549943969560348,-0.516104919116867,-0.481440210899310,-0.446005301046082,-0.409856877853897,-0.373052771088622,-0.335651859469953,-0.297713976478043,-0.259299814632695,-0.220470828398280,-0.181289135869695,-0.141817419396665,-0.102118825305376,-0.0622568628777862,-0.0222953027503478,0.0177019251054136,0.0576708336572156,0.0975474811776211,0.137268073537162,0.176769066261337,0.215987266188224,0.254859932564029,0.293324877414951,0.331320565034645,0.368786210428235,0.405661876555336,0.441888570216533,0.477408336429918,0.512164351146695,0.546101012157544,0.579164028044271,0.611300505034531,0.642459031620554,0.672589760806602,0.701644489853523,0.729576737392853,0.756341817787096,0.781896912617191,0.806201139182877,0.829215615906274,0.850903524534118,0.871230169039112,0.890163031126167,0.907671822254739,0.923728532094032,0.938307473333554,0.951385322777326,0.962941158656031,0.972956494097378,0.981415306701152,0.988304064171637,0.993611745966403,0.997329860926824,0.999452460862119,0.999976150065188,0.998900090745021,0.996226004366983,0.991958168898838,0.986103411966911,0.978671099933346,0.969673122911921,0.959123875746402,0.947040234981871,0.933441531865845,0.918349521422407,0.901788347648809,0.883784504890227,0.864366795454461,0.843566283534382,0.821416245511858,0.797952116722631,0.773211434767358,0.747233779459433,0.720060709505744,0.691735696021605,0.662304052986243,0.631812864750099,0.600310910709911,0.567848587272079,0.534477827229189,0.500252016678587,0.465225909616038,0.429455540341005,0.392998133813722,0.355912014107468,0.318256511102488,0.280091865570840,0.241479132804029,0.202480084937533,0.163157112128584,0.123573122745224,0.0837914427263319,0.0438757142736321,0.00388979403774775,-0.0361023490388186,-0.0760367360583536,-0.115849480520493,-0.155476890527038,-0.194855570675374,-0.233922523477601,-0.272615250143074,-0.310871850563136,-0.348631122338089,-0.385832658687980,-0.422416945090541,-0.458325454491766,-0.493500740936687,-0.527886531470652,-0.561427816164052,-0.594070936116469,-0.625763669299474,-0.656455314100735,-0.686096770435760,-0.714640618297594,-0.742041193618686,-0.768254661323667,-0.793239085456117,-0.816954496267150,-0.839362954158488,-0.860428610377718,-0.880117764368662,-0.898398917685055,-0.915242824381367,-0.930622537800058,-0.944513453680488,-0.956893349520488,-0.967742420127615,-0.977043309303245,-0.984781137608780,-0.990943526169578,-0.995520616478515,-0.998505086167493,-0.999892160721660,-0.999679621117624,-0.997867807373412,-0.994459618004515,-0.989460505386881,-0.982878467034279,-0.974724032803979,-0.965010248051230,-0.953752652759472,-0.940969256679681,-0.926680510518604,-0.910909273221997,-0.893680775405182,-0.875022578989447,-0.854964533108859,-0.833538726358005,-0.810779435457088,-0.786723070416496,-0.761408116288541,-0.734875071599593,-0.707166383561074,-0.678326380162967,-0.648401199258515,-0.617438714753462,-0.585488460018037,-0.552601548644127,-0.518830592674430,-0.484229618434410,-0.448853980101705,-0.412760271151239,-0.376006233817766,-0.338650666720570,-0.300753330798244};
//	for(int j=0;j<1250;j++) ts[0][j]=tss[j];


//
//std::vector<std::string> &split(const std::string &s, char delim, std::vector<std::string> &elems) {
//    std::stringstream ss(s);
//    std::string item;
//    while (getline(ss, item, delim)) {
//        elems.push_back(item);
//    }
//    return elems;
//}
//
//std::vector<std::string> split(const std::string &s, char delim) {
//    std::vector<std::string> elems;
//    split(s, delim, elems);
//    return elems;
//}
//
//vector< vector<double> > timeSeries(string path, string channel)
//{
//	ifstream myReadFile;
//	vector< vector<double> > v(0,vector<double>(0,0));
//
//	myReadFile.open(path.c_str());
//	string line;
//	if (myReadFile.is_open()) {
//		getline(myReadFile,line);
//
//		vector<string> headers = split(line, '\t');
//
//		int colFocus = -1;
//
//		for(int i = 0 ;i < 8 ;i++)
//		{
//			if(headers[i].compare(channel)==0)
//			{
//				colFocus = i;
//			}
//		}
//		if(colFocus == -1 )
//		{
//			cout<< "404 Column not Found, SKIP !!" << endl;
//			return v;
//		}
//
//		vector<string> data;
//		int current = 0;
//		vector<double> sample(ssize);
//		int wcl=0;
//		while(true)
//		{
//			wcl++;
//			if(wcl%10000==0) cout << "line:"<<wcl<<endl;
//			if(!getline(myReadFile,line))
//			{
//				break;
//			}
//			data=split(line, '\t');
//
//			if(data[colFocus].compare("") == 0)
//			{
//				//not found !! and restart
//				current =0;
//				continue;
//			}
//
//			double currentFocus = atof(data[colFocus].c_str());
//			sample[current++] = currentFocus;
////			cout << current << endl;
//			if(current == ssize)
//			{
//				v.push_back(sample);
//				sample = vector<double>(ssize);
//				current = 0;
//			}
//		}
//		return v;
//	}
//	else
//	{
//		cout << "404 file not found ! :(" << endl;
//		return v;
//	}
//}

